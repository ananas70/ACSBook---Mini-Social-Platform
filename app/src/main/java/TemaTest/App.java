/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TemaTest;
import java.util.Arrays;

public class App {

    private static void processCommandLineArgs(java.lang.String[] strings) {
    //java tema1 "–create-user"     "-u ‘username’"     "-p ‘password’"
    // -    -           0               1                      2
    String command = strings[0];
    switch (command) {
        case "-create-user":
            Utilizator.createSystemUser(Arrays.copyOfRange(strings,1,strings.length));
            break;
        case "-create-post":
            Postare.createSystemPost(Arrays.copyOfRange(strings,1,strings.length));
            break;
        case "-delete-post-by-id":
            Postare.deletePostById(Arrays.copyOfRange(strings,1,strings.length));
            break;
        case "-follow-user-by-username":
            Utilizator.createSystemFollowers(Arrays.copyOfRange(strings,1,strings.length));
            break;
        case "-unfollow-user-by-username":
            Utilizator.unfollowUserByUsername(Arrays.copyOfRange(strings,1,strings.length));
            break;
        case "-like-post":
            new Postare().like(Arrays.copyOfRange(strings,1,strings.length));
            break;
        case "-unlike-post":
            new Postare().unlike(Arrays.copyOfRange(strings,1,strings.length));
            break;
        case "-like-comment":
            new Comentariu().like(Arrays.copyOfRange(strings,1,strings.length));
            break;
        case "-unlike-comment":
            new Comentariu().unlike(Arrays.copyOfRange(strings,1,strings.length));
            break;
        case "-get-followings-posts":
            Postare.getFollowingsPosts(Arrays.copyOfRange(strings,1,strings.length));
            break;
        case "-get-user-posts":
            Postare.getUserPosts(Arrays.copyOfRange(strings,1,strings.length));
            break;
        case "-get-post-details":
            Postare.getPostDetails(Arrays.copyOfRange(strings,1,strings.length));
            break;
        case "-comment-post":
            Comentariu.createSystemComment(Arrays.copyOfRange(strings,1,strings.length));
            break;
        case "-delete-comment-by-id":
            Comentariu.deleteCommentById(Arrays.copyOfRange(strings,1,strings.length));
            break;
        case "-get-following":
            Utilizator.getFollowing(Arrays.copyOfRange(strings,1,strings.length));
            break;
        case "-get-followers":
            Utilizator.getFollowers(Arrays.copyOfRange(strings,1,strings.length));
            break;
        case "-get-most-liked-posts":
            Postare.getMostLikedPosts(Arrays.copyOfRange(strings,1,strings.length));
            break;
        case "-get-most-commented-posts":
            Postare.getMostCommentedPosts(Arrays.copyOfRange(strings,1,strings.length));
            break;
        case "-get-most-followed-users":
            Utilizator.getMostFollowedUsers(Arrays.copyOfRange(strings,1,strings.length));
            break;
        case "-get-most-liked-users":
            Utilizator.getMostLikedUsers(Arrays.copyOfRange(strings,1,strings.length));
            break;
        case "-cleanup-all":
        FileUtils.deleteFileContents("Users.txt");
        FileUtils.deleteFileContents("Posts.txt");
        FileUtils.deleteFileContents("Followers.txt");
        FileUtils.deleteFileContents("PostLikes.txt");
        FileUtils.deleteFileContents("Comments.txt");
        FileUtils.deleteFileContents("CommentLikes.txt");
        Postare.PostsArray.clear();
        Comentariu.CommentsArray.clear();
        Utilizator.UsersArray.clear();
            break;
        default:
            System.out.println("Comanda necunoscuta");
    }
}
    public App() {/* compiled code */}

    public static void main(java.lang.String[] strings) {
        if(strings == null)
            System.out.println("Hello world!");
        else
            processCommandLineArgs(strings);

    }
}